
      "source": [
        "# 6. Feature Engineering\n",
        "\n"
      ],
      "metadata": {
        "id": "XrOInEhgzX5e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6.1 Feature Creation"
      ],
      "metadata": {
        "id": "JQD3YODmBEL9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "customer_df = df.groupby('CustomerID').agg({\n",
        "    'Quantity': 'sum',\n",
        "    'UnitPrice': 'mean',\n",
        "    'Country': 'first'\n",
        "}).reset_index()\n",
        "\n",
        "\n",
        "\n",
        "# Aggregate transaction data by CustomerID to create customer-level features:\n",
        "# - Total quantity purchased\n",
        "# - Average unit price paid\n",
        "# - First country recorded (assuming one country per customer)\n"
      ],
      "metadata": {
        "id": "e0C9pBxyhDaE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "customer_df = df_cleaned.groupby('CustomerID').agg({\n",
        "    'Quantity': 'sum',\n",
        "    'UnitPrice': 'mean',\n",
        "    'Country': 'first'\n",
        "}).reset_index()\n",
        "\n",
        "# Add total spend\n",
        "customer_df['TotalSpend'] = customer_df['Quantity'] * customer_df['UnitPrice']\n",
        "print (customer_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5FygCub1zZ3q",
        "outputId": "ab402236-7606-44aa-b707-19308997239b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   CustomerID  Quantity  UnitPrice      Country   TotalSpend\n",
            "0     12347.0       319   2.890000      Iceland   921.910000\n",
            "1     12348.0      1254   2.917647      Finland  3658.729412\n",
            "2     12370.0       967   2.884778       Cyprus  2789.580111\n",
            "3     12377.0       604   2.106279  Switzerland  1272.192558\n",
            "4     12383.0       754   1.325135      Belgium   999.151892\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6.2 Recency, Frequency, Monetary (RFM) Features"
      ],
      "metadata": {
        "id": "FjyBXZprr3mT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# RFM (Recency, Frequency, Monetary) analysis:\n",
        "#   Recency: Days since the customer's last purchase (based on latest InvoiceDate)\n",
        "#   Frequency: Total number of unique invoices (how often the customer bought)\n",
        "#   Monetary: Total money spent by the customer (UnitPrice Ã— Quantity)\n",
        "# This helps understand customer behavior for segmentation and marketing strategies"
      ],
      "metadata": {
        "id": "i6Z24pX0MSxj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'InvoiceDate' column to datetime format for time-based calculations\n",
        "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n",
        "\n",
        "# Example: RFM calculation\n",
        "rfm = df.groupby('CustomerID').agg({\n",
        "    'InvoiceDate': lambda x: (df['InvoiceDate'].max() - x.max()).days,\n",
        "    'InvoiceNo': 'nunique',\n",
        "    'UnitPrice': lambda x: (x * df.loc[x.index, 'Quantity']).sum()\n",
        "})\n",
        "rfm.columns = ['Recency', 'Frequency', 'Monetary']\n"
      ],
      "metadata": {
        "id": "jaCwIbo0sYls"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6.3 Time-Based Features"
      ],
      "metadata": {
        "id": "g7TKFGqAsvXc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df['InvoiceMonth'] = df['InvoiceDate'].dt.month\n",
        "df['InvoiceWeekday'] = df['InvoiceDate'].dt.dayofweek\n",
        "\n",
        "\n",
        "# Extract month and weekday from 'InvoiceDate' to analyze seasonal and weekly purchase patterns:\n",
        "#   InvoiceMonth : Helps identify monthly trends (e.g., peak sales months)\n",
        "#   InvoiceWeekday : Shows which days of the week are most active for transactions (0 = Monday, 6 = Sunday)"
      ],
      "metadata": {
        "id": "_YUWOwyVsaFV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6.4 Clustering-Ready Features"
      ],
      "metadata": {
        "id": "B4KBgQsws8EK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "rfm_scaled = scaler.fit_transform(rfm)\n",
        "\n",
        "# Normalize RFM features using StandardScaler:\n",
        "#  Scales Recency, Frequency, and Monetary values to have mean = 0 and standard deviation = 1\n",
        "#  Helps improve performance of machine learning models by removing bias from feature scale differences\n"
      ],
      "metadata": {
        "id": "8a6GWjvys1Fl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6.5 EDA Visualization\n",
        "\n",
        "Interpretation: Low correlation with 'is_dup' (~0) suggests random errors, not patterned. Post-removal, data integrity improves for accurate Frequency counts in RFM."
      ],
      "metadata": {
        "id": "U5UkLrLtI65e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Duplicate heatmap (simplified) - Comment: Flag duplicates per row\n",
        "df['is_dup'] = df.duplicated(keep=False)\n",
        "sns.heatmap(df[['Quantity', 'UnitPrice', 'is_dup']].head(100).corr(), annot=True)\n",
        "plt.title('Correlation Including Duplicates Flag')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "94ysUsmzU1iM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "f90b7491-b657-42e3-8901-6a80f3e4d677"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "o-Py_BjidiyX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
     